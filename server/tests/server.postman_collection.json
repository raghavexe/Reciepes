{
	"info": {
		"_postman_id": "69883892-55aa-4573-9abf-bedf285e4bdc",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29625156",
		"_collection_link": "https://orange-meadow-774719.postman.co/workspace/New-Team-Workspace~2ab92b1f-3099-4a59-974b-4c725d3d14d7/collection/29625156-69883892-55aa-4573-9abf-bedf285e4bdc?action=share&source=collection_link&creator=29625156"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"pm.collectionVariables.set(\"username\", body.username)",
									"pm.collectionVariables.set(\"userID\", body._id)",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var value = pm.collectionVariables.get(\"userIDNo\");",
									"pm.collectionVariables.set(\"userIDNo\", value+1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var value = pm.collectionVariables.get(\"userIDNo\");",
									"",
									"if (!value) {",
									"    pm.collectionVariables.set(\"userIDNo\", 1);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{userIDNo}}",
									"type": "default"
								},
								{
									"key": "password",
									"value": "myPass",
									"type": "default"
								},
								{
									"key": "email",
									"value": "kor@gmail.com",
									"type": "default"
								},
								{
									"key": "firstName",
									"value": "jag",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "ibland",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to create the same user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "default"
								},
								{
									"key": "password",
									"value": "myPass",
									"type": "default"
								},
								{
									"key": "email",
									"value": "kor@gmail.com",
									"type": "default"
								},
								{
									"key": "firstName",
									"value": "jag",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "ibland",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to create user with no email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "iShallNeverBeCreated",
									"type": "default"
								},
								{
									"key": "password",
									"value": "myPass",
									"type": "default"
								},
								{
									"key": "firstName",
									"value": "jag",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "ibland",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"pm.collectionVariables.set(\"jwt\", response.jwt)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "default"
								},
								{
									"key": "password",
									"value": "myPass",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "user9",
									"disabled": true
								},
								{
									"key": "password",
									"value": "myPass",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "lastName",
									"value": "Tengse",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/users/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update user WHEN not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "lastName",
									"value": "Tengse",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/users/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "logged in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Check if username is {{username}}\", () => {",
									"    const expectedUsername = pm.collectionVariables.get(\"username\")",
									"    pm.expect(body.username).to.equal(expectedUsername)",
									"})",
									"",
									"pm.test(\"Check if userID is {{userID}}\", () => {",
									"    const expectedUsername = pm.collectionVariables.get(\"userID\")",
									"    pm.expect(body._id).to.equal(expectedUsername)",
									"})",
									"",
									"pm.test(\"Check if lastName is 'Tengse'\", function () {",
									"    pm.expect(body.lastName).to.equal(\"Tengse\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "localhost:3000/api/v1/users/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posts",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json()",
									"pm.collectionVariables.set(\"postID\", response._id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user10}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "postName",
									"value": "Swedish meatballs user 24",
									"type": "text"
								},
								{
									"key": "recipe",
									"value": "Just make them, idk",
									"type": "text"
								},
								{
									"key": "postImage",
									"type": "file",
									"src": "/Users/h/Downloads/db8516a7-101f-4c7a-9ed9-7740b6a70672.jpg",
									"disabled": true
								},
								{
									"key": "ingredients[0]",
									"value": "Meat",
									"type": "text"
								},
								{
									"key": "ingredients[1]",
									"value": "Veggies",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"removeRefererHeaderOnRedirect": false,
						"disableCookies": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/images/{{postID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"images",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update post partially",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ingredients\": [\"pork\", \"broth\", \"Vegetables\", \"Herbs\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete one post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "create again (needed for other tests)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json()",
									"pm.globals.set(\"postId\", response._id);",
									"pm.collectionVariables.set(\"postID\", response._id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{user10}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "postName",
									"value": "Swedish meatballs",
									"type": "text"
								},
								{
									"key": "recipe",
									"value": "Just make them, idk",
									"type": "text"
								},
								{
									"key": "postImage",
									"type": "file",
									"src": "/Users/h/Downloads/db8516a7-101f-4c7a-9ed9-7740b6a70672.jpg",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "course",
			"item": [
				{
					"name": "create course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.collectionVariables.set(\"courseID\", body._id)",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"UserID is {{userID}}\", () => {",
									"    const userID = pm.collectionVariables.get(\"userID\")",
									"    pm.expect(body.userID).to.equal(userID)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{userID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "meetingLink",
									"value": "zoom.gov/3",
									"type": "text"
								},
								{
									"key": "maxAttendees",
									"value": "5",
									"type": "text"
								},
								{
									"key": "start",
									"value": "2023-10-21T10:30:10Z",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "180",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Stockholm other course",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "get FROM post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post has courses\", () => {",
									"    pm.expect(body).to.be.an(\"array\").that.is.not.empty",
									"})",
									"",
									"",
									"//TODO: check sorting"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/courses?sort=-maxAttendees,_id",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"courses"
							],
							"query": [
								{
									"key": "sort",
									"value": "-maxAttendees,_id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Gets right post\", () => {",
									"    const courseID = pm.collectionVariables.get(\"courseID\")",
									"    pm.expect(body._id).to.equal(courseID)",
									"})",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NGZjMGYyMDcxNjIyNGNkODgxMzU2ZGUiLCJpYXQiOjE2OTQyNDA1Njl9.hf6NaxIoES7r0vq5GxDCAcr0udGct6Cg-mlgRbgPda8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "localhost:3000/api/v1/courses/{{courseID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "courses posted BY user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"user has courses\", () => {",
									"    pm.expect(body).to.be.an(\"array\").that.is.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/v1/courses/posted-courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"posted-courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "courses posted attended by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"user is not attending courses\", () => {",
									"    pm.expect(body).to.be.an(\"array\").that.is.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/v1/courses/attending-courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"attending-courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "course FROM id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/courses/{{courseID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseID}}"
							],
							"query": [
								{
									"key": "",
									"value": "{{login user9}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "courses posted BY user IS empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"user has no courses\", () => {",
									"    pm.expect(body).to.be.an(\"array\").that.is.empty",
									"})",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/v1/courses/posted-courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"posted-courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "recreate course USING http override",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.collectionVariables.set(\"courseID\", body._id)",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"UserID is {{userID}}\", () => {",
									"    const userID = pm.collectionVariables.get(\"userID\")",
									"    pm.expect(body.userID).to.equal(userID)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-http-method-override",
								"value": "post",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "meetingLink",
									"value": "zoom.gov/3",
									"type": "text"
								},
								{
									"key": "maxAttendees",
									"value": "5",
									"type": "text"
								},
								{
									"key": "start",
									"value": "2093-12-12",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "courses posted BY user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"right amount of deletions\", () => {",
									"    pm.expect(body.amtDeleted).to.equal(1)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "courses posted BY user WHEN none",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"right amount of deletions\", () => {",
									"    pm.expect(body.amtDeleted).to.equal(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NGZjMGYyMDcxNjIyNGNkODgxMzU2ZGUiLCJpYXQiOjE2OTQyNDA1Njl9.hf6NaxIoES7r0vq5GxDCAcr0udGct6Cg-mlgRbgPda8",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/v1/courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "courses posted BY user IS empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"user has no courses\", () => {",
									"    pm.expect(body).to.be.an(\"array\").that.is.empty",
									"})",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwt}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/v1/courses/posted-courses",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"posted-courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "put new course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "postID",
									"value": "{{postID}}",
									"type": "text"
								},
								{
									"key": "maxAttendees",
									"value": "1",
									"type": "text"
								},
								{
									"key": "meetingLink",
									"value": "zoom.gov/95",
									"type": "text"
								},
								{
									"key": "start",
									"value": "2024-07-11",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "80",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/courses/{{courseID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"maxAttendees is updated to 9\", () => {",
									"    pm.expect(body.maxAttendees).to.equal(9)",
									"})",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "postID",
									"value": "{{postID}}",
									"type": "text"
								},
								{
									"key": "maxAttendees",
									"value": "9",
									"type": "text"
								},
								{
									"key": "start",
									"value": "2025-08-11",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "40",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/courses/{{courseID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"courses",
								"{{courseID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "attendance",
			"item": [
				{
					"name": "attend",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "localhost:3000/api/v1/attendance/{{courseID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"attendance",
								"{{courseID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "leave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "localhost:3000/api/v1/attendance/{{courseID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"attendance",
								"{{courseID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "post new review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"const response = pm.response.json()",
									"pm.collectionVariables.set(\"reviewId\", response._id)",
									"pm.collectionVariables.set(\"reviewIndex\", response.index);",
									"",
									"pm.test(\"Rating is 5\", () => {",
									"    pm.expect(response.rating).to.equal(5)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Recommended recipe!\",\n    \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "change rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"const response = pm.response.json()",
									"",
									"pm.test(\"Rating is 1\", () => {",
									"    pm.expect(response.rating).to.equal(1)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "text",
									"value": "...Actually, nevermind. I got food poisoning",
									"type": "text"
								},
								{
									"key": "rating",
									"value": "1",
									"type": "text"
								},
								{
									"key": "postID",
									"value": "{{postID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/api/v1/reviews/{{reviewId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews",
								"{{reviewId}}"
							],
							"query": [
								{
									"key": "text",
									"value": "...Actually nevermind, it sucks",
									"disabled": true
								},
								{
									"key": "rating",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get one review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews/{{reviewIndex}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews",
								"{{reviewIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete one review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews/{{reviewIndex}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews",
								"{{reviewIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete review by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews/{{reviewId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one deleted review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews/{{reviewId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "post new review USING http override",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"const response = pm.response.json()",
									"pm.collectionVariables.set(\"reviewId\", response._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-http-method-override",
								"value": "post",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Recommended recipe!\",\n    \"rating\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all reviews under one post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"There is >=1 reviews\", () => {",
									"    pm.expect(body).to.be.an(\"array\").that.is.not.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/posts/{{postID}}/reviews",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"posts",
								"{{postID}}",
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "courseID",
			"value": ""
		},
		{
			"key": "postID",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "reviewId",
			"value": ""
		},
		{
			"key": "userIDNo",
			"value": ""
		},
		{
			"key": "reviewIndex",
			"value": ""
		}
	]
}